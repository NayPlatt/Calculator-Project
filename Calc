#include <iostream>
#include <stdexcept>
#include <string>
#include <sstream>
#include <cmath>
#include <map>

const char NUMBER = '8';
const char PI_CONSTANT = 'p';
const char VARIABLE = 'a'; //variable assignment 
const char QUIT = 'q';
const char PRINT = ';';
const char HELP = 'h';  
const char CLEAR = 'c'; 
const char MODULUS = '%';

class Token {
    char kind;
    double value;

public:
    Token(char ch) : kind(ch), value(0) {}
    Token(double val) : kind(NUMBER), value(val) {}

    char getKind() const { return kind; }
    double getValue() const { return value; }
};

std::string const PROMPT = "> ";
std::string const RESULT = "= ";

class TokenStream {
    bool isFull;
    Token buffer;

public:
    TokenStream() : isFull(false), buffer('\0') {}

    Token get();
    void putback(Token);
    void ignore(char c);
};

TokenStream ts;

void TokenStream::putback(Token t) {
    if (isFull)
        throw std::runtime_error("putback() into a full buffer");
    buffer = t;
    isFull = true;
}

Token TokenStream::get() {
    if (isFull) {
        isFull = false;
        return buffer;
    }

    char ch;
    std::cin >> ch;

    switch (ch) {
        case '(':
        case ')':
        case ';':
        case 'q':  // needs to handle 'q'
        case '+':
        case '-':
        case '*':
        case '/':
        case '%':
        case '^':
        case 's':
        case 'c':
        case 't':
        case 'l':
        case 'e':
            return Token(ch);
        case '.':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9': {
            std::cin.putback(ch);
            double val;
            std::cin >> val;
            return Token(val);
        }
        case 'p':
             return Token(std::acos(-1));
        case 'a':
        {
        std::cin >> ch; //reads = signs 
            throw std::runtime_error("Bad Variable assignment");
        double val;
        std::cin >> val;
        return Token(val);
        }
        default:
            throw std::runtime_error("Bad token");

    }
}

void TokenStream::ignore(char c) {
    if (isFull && c == buffer.getKind()) {
        isFull = false;
        return;
    }
    isFull = false;

    char ch = 0;
    while (std::cin >> ch) {
        if (ch == c)
            break;
    }
}

double expression();

double primary() {
    Token t = ts.get();
    switch (t.getKind()) {
        case '(':
        {
            double d = expression();
            t = ts.get();
            if (t.getKind() != ')')
                throw std::runtime_error("')' expected");
            return d;
        }
        case NUMBER:
            return t.getValue();
        case VARIABLE:
            return t.getValue();
        case '-':
            return -primary();
        case '+':
            return primary();
        case 's':
            return std::sin(primary());
        case 'c':
            return std::cos(primary());
        case 't':
            return std::tan(primary());
        case 'l':
        {
            double d = primary();
            if (d <= 0)
                throw std::runtime_error("logarithm of non-positive number");
            return std::log(d);
        }
        case 'e':
            return std::exp(primary());
        default:
            throw std::runtime_error("primary expected");
    }
}

double term() {
    double left = primary();
    while (true) {
        Token t = ts.get();
        switch (t.getKind()) {
            case '*':
                left *= primary();
                break;
            case '/':
            {
                double d = primary();
                if (d == 0)
                    throw std::runtime_error("divide by zero");
                left /= d;
                break;
            }
            case '%':
            {
                double d = primary();
                if (d == 0)
                    throw std::runtime_error("divide by zero");
                left = std::fmod(left, d);
                break;
            }
            case '^':
                left = std::pow(left, primary());
                break;
            default:
                ts.putback(t);
                return left;
        }
    }
}

double expression() {
    double left = term();
    while (true) {
        Token t = ts.get();
        switch (t.getKind()) {
            case '+':
                left += term();
                break;
            case '-':
                left -= term();
                break;
            default:
                ts.putback(t);
                return left;
        }
    }
}

void cleanUpMess() {
    ts.ignore(PRINT);
}

void calculate() {
   std::map<char, double> variables; // Map to store variables and their values
    while (true) {
        try {
            std::cout << PROMPT;
            Token t = ts.get();

            while (t.getKind() == PRINT)
                t = ts.get();

            if (t.getKind() == QUIT)
                return; // Exit the loop and quit the calculator

            if (t.getKind() == HELP) {
                std::cout << "Scientific Calculator Commands:\n"
                             "- Enter expressions using numbers and operators: +, -, *, /, % (modulus), ^ (exponentiation).\n"
                             "- Use parentheses for grouping, e.g., (3 + 4) * 2.\n"
                             "- Supported functions: sin, cos, tan, log, exp.\n"
                             "- Type 'q' to quit.\n"
                             "- Type 'c' to clear the screen.\n";
            }
            else if (t.getKind() == CLEAR) {
                std::cout << "\033[2J\033[1;1H"; // ANSI escape code to clear screen
            }
            else if (t.getKind() == VARIABLE) { // Handle variable 
            char varName = ts.get().getValue();
            Token assign = ts.get();
            if(assign.getKind() != '=')
                throw std::runtime_error("Invalid Variable assignment");
            double val = expression();
            variables[varName] = val;
            }
            else {
                ts.putback(t);
                std::cout << RESULT << expression() << std::endl;
            }
        }
        catch (std::runtime_error const &e){
            std::cerr << e.what () << std::endl;
            cleanUpMess();
        }
    }
}

int main() {
    
    try {
        calculate();
        return 0;
    }
    catch (...) {
        std::cerr << "exception\n";
        return 2;
    }
}

